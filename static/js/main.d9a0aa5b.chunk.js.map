{"version":3,"sources":["logo.svg","images/logo.svg","App.js","headers/light.js","Landing.js","serviceWorker.js","index.js"],"names":["module","exports","App","NavLinks","header","div","NavLink","a","PrimaryLink","MobileNavLinksContainer","styled","nav","MobileNavLinks","button","motion","custom","DesktopNavLinks","Actions","Container","OpacityOverlay","Description","p","HeroContainer","Content","FeatureIcon","CheckboxIcon","Heading","h1","initialValues","email","onSubmit","values","requestOptions","method","headers","body","JSON","stringify","title","fetch","response","json","alert","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit","id","placeholder","type","value","onChange","onBlur","className","disabled","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","Landing","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,kLCyB5BC,I,8FCRFC,GALE,IAAGC,OAAN,4HAKY,IAAGC,IAAN,2BAKRC,EAAU,IAAGC,EAAN,smBAMPC,G,2JAAc,YAAGF,EAAH,CAAH,kjBAeXG,G,uIARWC,YAAOJ,GAAV,sEAAGI,CAAH,4LAQkB,IAAGC,IAAN,oFAIvBC,G,mJAHY,IAAGC,OAAN,+SAGQC,IAAOC,OAAOL,IAAOL,IAArB,4EAAcK,CAAd,gaAE1BP,EAF0B,+DAOjBa,G,0IAAkB,IAAGL,IAAN,kICjCtBM,G,8YAAUP,IAAOL,IAAV,mEAAGK,CAAH,y8CAWPQ,EAAYR,IAAOL,IAAV,qEAAGK,CAAH,yPAKTS,EAAiB,IAAGd,IAAN,8JACde,EAAc,IAAGC,EAAN,2PACXC,EAAgB,IAAGjB,IAAN,+PACbkB,EAAU,IAAGlB,IAAN,0IACPmB,EAAc,YAAGC,IAAH,CAAH,2HAGXC,EAAUhB,IAAOiB,GAAV,mEAAGjB,CAAH,iYAUE,aAUb,OACE,kBAACQ,EAAD,KACE,kBAACC,EAAD,MACA,kBAACG,EAAD,KAEE,kBAACC,EAAD,KACE,kBAACG,EAAD,0BAGA,kBAACN,EAAD,oBAAyB,kBAACI,EAAD,MAAzB,mBAAwD,kBAACA,EAAD,MAAxD,gBACA,kBAACP,EAAD,KACA,kBAAC,IAAD,CACEW,cAAe,CAAEC,MAAO,IACxBC,SAAQ,uCAAE,WAAMC,GAAN,iBAAAxB,EAAA,6DACFyB,EAAiB,CACnBC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAU,CAAEC,MAAO,6BAA8BT,MAAOE,EAAOF,SAJtE,SAMeU,MAAM,2CAA4CP,GANjE,cAMFQ,EANE,gBAOWA,EAASC,OAPpB,cAQRC,MAAM,0CARE,2CAAF,wDAWP,SAAAC,GAAU,IAEPZ,EAOEY,EAPFZ,OACAa,EAMED,EANFC,QACAC,EAKEF,EALFE,OACAC,EAIEH,EAJFG,aACAC,EAGEJ,EAHFI,aACAC,EAEEL,EAFFK,WACAC,EACEN,EADFM,aAEF,OACE,0BAAMnB,SAAUmB,GACd,2BACEC,GAAG,QACHC,YAAY,mBACZC,KAAK,OACLC,MAAOtB,EAAOF,MACdyB,SAAUP,EACVQ,OAAQP,IAETH,EAAOhB,OAASe,EAAQf,OACvB,yBAAK2B,UAAU,kBAAkBX,EAAOhB,OAG1C,4BAAQuB,KAAK,SAASK,SAAUX,GAAhC,mBCpGEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9a0aa5b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.f9776f55.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { motion } from \"framer-motion\";\nimport tw from \"twin.macro\";\nimport styled from \"styled-components\";\nimport { css } from \"styled-components/macro\"; //eslint-disable-line\n\nimport useAnimatedNavToggler from \"../helpers/useAnimatedNavToggler.js\";\n\nimport logo from \"../images/logo.svg\";\nimport { ReactComponent as MenuIcon } from \"feather-icons/dist/icons/menu.svg\";\nimport { ReactComponent as CloseIcon } from \"feather-icons/dist/icons/x.svg\";\n\nconst Header = tw.header`\n  flex justify-between items-center\n  max-w-screen-xl mx-auto\n`;\n\nexport const NavLinks = tw.div`inline-block`;\n\n/* hocus: stands for \"on hover or focus\"\n * hocus:bg-primary-700 will apply the bg-primary-700 class on hover or focus\n */\nexport const NavLink = tw.a`\n  text-lg my-2 lg:text-sm lg:mx-6 lg:my-0\n  font-semibold tracking-wide transition duration-300\n  pb-1 border-b-2 border-transparent hover:border-pink-500 hocus:text-pink-500\n`;\n\nexport const PrimaryLink = tw(NavLink)`\n  lg:mx-0\n  px-8 py-3 rounded bg-pink-500 text-gray-100\n  hocus:bg-pink-700 hocus:text-gray-200 focus:shadow-outline\n  border-b-0\n`;\n\nexport const LogoLink = styled(NavLink)`\n  ${tw`flex items-center font-black border-b-0 text-2xl! ml-0!`};\n\n  img {\n    ${tw`w-10 mr-3`}\n  }\n`;\n\nexport const MobileNavLinksContainer = tw.nav`flex flex-1 items-center justify-between`;\nexport const NavToggle = tw.button`\n  lg:hidden z-20 focus:outline-none hocus:text-pink-500 transition duration-300\n`;\nexport const MobileNavLinks = motion.custom(styled.div`\n  ${tw`lg:hidden z-10 fixed top-0 inset-x-0 mx-4 my-6 p-8 border text-center rounded-lg text-gray-900 bg-white`}\n  ${NavLinks} {\n    ${tw`flex flex-col items-center`}\n  }\n`);\n\nexport const DesktopNavLinks = tw.nav`\n  hidden lg:flex flex-1 justify-between items-center\n`;\n\nexport default ({ roundedHeaderButton = false, logoLink, links, className, collapseBreakpointClass = \"lg\" }) => {\n  /*\n   * This header component accepts an optionals \"links\" prop that specifies the links to render in the navbar.\n   * This links props should be an array of \"NavLinks\" components which is exported from this file.\n   * Each \"NavLinks\" component can contain any amount of \"NavLink\" component, also exported from this file.\n   * This allows this Header to be multi column.\n   * So If you pass only a single item in the array with only one NavLinks component as root, you will get 2 column header.\n   * Left part will be LogoLink, and the right part will be the the NavLinks component you\n   * supplied.\n   * Similarly if you pass 2 items in the links array, then you will get 3 columns, the left will be \"LogoLink\", the center will be the first \"NavLinks\" component in the array and the right will be the second \"NavLinks\" component in the links array.\n   * You can also choose to directly modify the links here by not passing any links from the parent component and\n   * changing the defaultLinks variable below below.\n   * If you manipulate links here, all the styling on the links is already done for you. If you pass links yourself though, you are responsible for styling the links or use the helper styled components that are defined here (NavLink)\n   */\n  const defaultLinks = [\n    <NavLinks key={1}>\n      <NavLink href=\"/#\">About</NavLink>\n      <NavLink href=\"/#\">Blog</NavLink>\n      <NavLink href=\"/#\">Pricing</NavLink>\n      <NavLink href=\"/#\">Contact Us</NavLink>\n      <NavLink href=\"/#\" tw=\"lg:ml-12!\">\n        Login\n      </NavLink>\n      <PrimaryLink css={roundedHeaderButton && tw`rounded-full`}href=\"/#\">Sign Up</PrimaryLink>\n    </NavLinks>\n  ];\n\n  const { showNavLinks, animation, toggleNavbar } = useAnimatedNavToggler();\n  const collapseBreakpointCss = collapseBreakPointCssMap[collapseBreakpointClass];\n\n  const defaultLogoLink = (\n    <LogoLink href=\"/\">\n      <img src={logo} alt=\"logo\" />\n      Treact\n    </LogoLink>\n  );\n\n  logoLink = logoLink || defaultLogoLink;\n  links = links || defaultLinks;\n\n  return (\n    <Header className={className || \"header-light\"}>\n      <DesktopNavLinks css={collapseBreakpointCss.desktopNavLinks}>\n        {logoLink}\n        {links}\n      </DesktopNavLinks>\n\n      <MobileNavLinksContainer css={collapseBreakpointCss.mobileNavLinksContainer}>\n        {logoLink}\n        <MobileNavLinks initial={{ x: \"150%\", display: \"none\" }} animate={animation} css={collapseBreakpointCss.mobileNavLinks}>\n          {links}\n        </MobileNavLinks>\n        <NavToggle onClick={toggleNavbar} className={showNavLinks ? \"open\" : \"closed\"}>\n          {showNavLinks ? <CloseIcon tw=\"w-6 h-6\" /> : <MenuIcon tw=\"w-6 h-6\" />}\n        </NavToggle>\n      </MobileNavLinksContainer>\n    </Header>\n  );\n};\n\n/* The below code is for generating dynamic break points for navbar.\n * Using this you can specify if you want to switch\n * to the toggleable mobile navbar at \"sm\", \"md\" or \"lg\" or \"xl\" above using the collapseBreakpointClass prop\n * Its written like this because we are using macros and we can not insert dynamic variables in macros\n */\n\nconst collapseBreakPointCssMap = {\n  sm: {\n    mobileNavLinks: tw`sm:hidden`,\n    desktopNavLinks: tw`sm:flex`,\n    mobileNavLinksContainer: tw`sm:hidden`\n  },\n  md: {\n    mobileNavLinks: tw`md:hidden`,\n    desktopNavLinks: tw`md:flex`,\n    mobileNavLinksContainer: tw`md:hidden`\n  },\n  lg: {\n    mobileNavLinks: tw`lg:hidden`,\n    desktopNavLinks: tw`lg:flex`,\n    mobileNavLinksContainer: tw`lg:hidden`\n  },\n  xl: {\n    mobileNavLinks: tw`lg:hidden`,\n    desktopNavLinks: tw`lg:flex`,\n    mobileNavLinksContainer: tw`lg:hidden`\n  }\n};\n","import React from \"react\";\nimport tw from \"twin.macro\";\nimport styled from \"styled-components\";\nimport { css } from \"styled-components/macro\"; //eslint-disable-line\nimport { Formik } from \"formik\";\nimport { ReactComponent as CheckboxIcon } from \"feather-icons/dist/icons/arrow-right.svg\";\n\n\n\nimport Header, { NavLinks } from \"./headers/light.js\";\n\n// const StyledHeader = styled(Header)`\n//   ${tw`pt-8 max-w-none w-full`}\n//   ${DesktopNavLinks} ${NavLink}, ${LogoLink} {\n//     ${tw`text-gray-100 hover:border-gray-300 hover:text-gray-300`}\n//   }\n//   ${NavToggle}.closed {\n//     ${tw`text-gray-100 hover:text-pink-500`}\n//   }\n// `;\n\nconst Actions = styled.div`\n  ${tw`relative max-w-lg text-center mx-auto lg:mx-0`}\n  input {\n    ${tw`sm:pr-48 pl-8 py-4 sm:py-5 rounded-full border-2 w-full font-medium focus:outline-none transition duration-300  focus:border-indigo-500 hover:border-gray-500`}\n  }\n  button {\n    ${tw`w-full sm:absolute right-0 top-0 bottom-0 bg-indigo-500 text-gray-100 font-bold mr-2 my-4 sm:my-2 rounded-full py-4 flex items-center justify-center sm:w-40 sm:leading-none focus:outline-none hover:bg-green-900 transition duration-300`}\n  }\n`;\n\n// const PrimaryLink = tw(PrimaryLinkBase)`rounded-full`\nconst Container = styled.div`\n  ${tw`relative -mx-8 -mt-8 bg-center bg-cover h-screen min-h-screen`}\n  background-image: url(\"https://i.ibb.co/TvKCphd/banner-without-layover.png\");\n`;\n\nconst OpacityOverlay = tw.div`z-10 absolute inset-0 bg-black opacity-75`;\nconst Description = tw.p`text-gray-500 font-medium text-xl max-w-lg mt-2 mb-4 sm:mt-1 text-center sm:text-left`\nconst HeroContainer = tw.div`z-20 relative px-6 sm:px-8 mx-auto h-full flex flex-col overflow-x-hidden`;\nconst Content = tw.div`px-4 flex flex-1 flex-col justify-center items-center`;\nconst FeatureIcon = tw(CheckboxIcon)`w-5 h-5 text-indigo-500 inline`;\n\n\nconst Heading = styled.h1`\n  ${tw`text-3xl text-center sm:text-4xl lg:text-5xl xl:text-6xl font-black text-gray-100 leading-snug -mt-24 sm:mt-0`}\n  span {\n    ${tw`inline-block mt-2`}\n  }\n`;\n\n\n// const PrimaryAction = tw.button`rounded-full px-8 py-3 mt-10 text-sm sm:text-base sm:mt-16 sm:px-8 sm:py-4 bg-gray-100 font-bold shadow transition duration-300 bg-pink-500 text-gray-100 hocus:bg-pink-700 hocus:text-gray-200 focus:outline-none focus:shadow-outline`;\n\nexport default () => {\n  const navLinks = [\n    <NavLinks key={1}>\n      \n    </NavLinks>,\n    <NavLinks key={2}>\n      \n    </NavLinks>\n  ];\n\n  return (\n    <Container>\n      <OpacityOverlay />\n      <HeroContainer>\n        \n        <Content>\n          <Heading>\n              Buy Game Accounts\n          </Heading>\n          <Description>Select Game <FeatureIcon /> Select Account <FeatureIcon /> Buy Account</Description>\n          <Actions >\n          <Formik\n            initialValues={{ email: \"\" }}\n            onSubmit={async values => {\n              const requestOptions = {\n                  method: 'POST',\n                  headers: { 'Content-Type': 'application/json' },\n                  body: JSON.stringify({ title: 'React POST Request Example', email: values.email })\n              };\n              const response = await fetch('https://app.99inbound.com/api/e/XiJNjIXz', requestOptions);\n              const data = await response.json();\n              alert(\"Cool!! We'll let you know pretty soon.\");\n            }}\n          >\n            {props => {\n              const {\n                values,\n                touched,\n                errors,\n                isSubmitting,\n                handleChange,\n                handleBlur,\n                handleSubmit\n              } = props;\n              return (\n                <form onSubmit={handleSubmit}>\n                  <input\n                    id=\"email\"\n                    placeholder=\"Enter your email\"\n                    type=\"text\"\n                    value={values.email}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                  />\n                  {errors.email && touched.email && (\n                    <div className=\"input-feedback\">{errors.email}</div>\n                  )}\n\n                  <button type=\"submit\" disabled={isSubmitting}>\n                    Submit\n                  </button>\n\n                </form>\n              );\n            }}\n          </Formik>\n          </Actions>\n        </Content>\n      </HeroContainer>\n    </Container>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport \"tailwindcss/dist/base.css\";\nimport App from './App';\nimport Landing from './Landing';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Landing />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}